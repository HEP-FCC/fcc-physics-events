general {
    # Logging level - can be DEBUG, INFO, WARNING, ERROR, CRITICAL
    log_level = "INFO"
    log_level = ${?METADATA_VIEWER_LOG_LEVEL}
    
    # CERN OAuth client configuration (required secrets)
    cern_client_id = ${METADATA_VIEWER_CERN_CLIENT_ID}
    cern_client_secret = ${METADATA_VIEWER_CERN_CLIENT_SECRET}
    
    # Application security key (required secret)
    application_secret_key = ${METADATA_VIEWER_APPLICATION_SECRET_KEY}
    
    # Security settings
    https_only = "false"
    https_only = ${?METADATA_VIEWER_HTTPS_ONLY}
    
    # CERN OAuth redirect URI
    cern_redirect_uri = "http://localhost:8000/auth"
    cern_redirect_uri = ${?METADATA_VIEWER_CERN_REDIRECT_URI}
    
    # Frontend URL for CORS and redirects
    frontend_url = "http://localhost:3000"
    frontend_url = ${?METADATA_VIEWER_FRONTEND_URL}
    
    # Required CERN role for authentication (optional - if not set, no role check)
    required_cern_role = ${?METADATA_VIEWER_REQUIRED_CERN_ROLE}
    
    # Cookie prefix for session management
    cookie_prefix = "fcc-physics-events-web"
    cookie_prefix = ${?METADATA_VIEWER_COOKIE_PREFIX}
}

# Application configuration
application {
    # The main entity table name (source of truth for all data)
    # This table should contain foreign keys to all navigation entities
    main_table = "datasets"
    main_table = ${?METADATA_VIEWER_MAIN_TABLE}
    
    # Application branding
    title = "FCC Physics Events"
    title = ${?METADATA_VIEWER_TITLE}
    
    description = "Search and explore FCC physics simulation datasets and data"
    description = ${?METADATA_VIEWER_DESCRIPTION}
    
    search_placeholder = "Search datasets..."
    search_placeholder = ${?METADATA_VIEWER_SEARCH_PLACEHOLDER}
    
    # API configuration
    timeout = 30
    timeout = ${?METADATA_VIEWER_TIMEOUT}
    
    max_page_size = 1000
    max_page_size = ${?METADATA_VIEWER_MAX_PAGE_SIZE}
    
    default_page_size = 25
    default_page_size = ${?METADATA_VIEWER_DEFAULT_PAGE_SIZE}
    
    # Database pool configuration
    pool_min_size = 5
    pool_min_size = ${?METADATA_VIEWER_POOL_MIN_SIZE}
    
    pool_max_size = 20
    pool_max_size = ${?METADATA_VIEWER_POOL_MAX_SIZE}
    
    # Batch processing configuration
    batch_size = 128
    batch_size = ${?METADATA_VIEWER_BATCH_SIZE}
}

# File watcher configuration
file_watcher {
    # Enable or disable the file watcher service
    enabled = true
    enabled = ${?METADATA_VIEWER_FILE_WATCHER_ENABLED}
    
    # List of directories to watch for changes (absolute paths)
    watch_paths = ["/data"]
    watch_paths = ${?METADATA_VIEWER_FILE_WATCHER_PATHS}
    
    # File extensions to monitor (e.g., [".json", ".txt"])
    file_extensions = [".json"]
    file_extensions = ${?METADATA_VIEWER_FILE_WATCHER_EXTENSIONS}
    
    # Watch subdirectories recursively
    recursive = true
    recursive = ${?METADATA_VIEWER_FILE_WATCHER_RECURSIVE}
    
    # Debounce delay in seconds to wait after file change before processing
    # This helps ensure the file is fully written before processing
    debounce_delay = 2
    debounce_delay = ${?METADATA_VIEWER_FILE_WATCHER_DEBOUNCE_DELAY}
    
    # Polling interval in seconds for checking file changes
    polling_interval = 300
    polling_interval = ${?METADATA_VIEWER_FILE_WATCHER_POLLING_INTERVAL}
    
    # Startup behavior: how to handle existing files when the service starts
    # Options:
    # - "ignore": Only process files that change after startup (recommended for production)
    # - "process_all": Process all existing files on startup (useful for initial data load)
    # - "process_new": Only process files newer than the last service run
    startup_mode = "process_all"
    startup_mode = ${?METADATA_VIEWER_STARTUP_MODE}
    
    # State file to track processed files (for persistent state across restarts)
    # If not specified, state is only kept in memory
    state_file = "/backend-storage/file_watcher_state.json"
    state_file = ${?METADATA_VIEWER_STATE_FILE}
}

# Navigation configuration
# Defines the order of navigation entities (determines display order in frontend)
# NOTE: These must match the foreign key column names in the main table (without _id suffix)
navigation {
    order = ["accelerator", "stage", "campaign", "detector", "file_type"]
    order = ${?METADATA_VIEWER_NAVIGATION_ORDER}
}

auth {
    # Token cache duration in seconds
    cache_duration = 3600
    cache_duration = ${?METADATA_VIEWER_AUTH_CACHE_DURATION}
    
    # Minimum token length for validation
    min_token_length = 10
    min_token_length = ${?METADATA_VIEWER_AUTH_MIN_TOKEN_LENGTH}
    
    # CERN OpenID Connect configuration URL (required)
    cern_oidc_url = "https://auth.cern.ch/auth/realms/cern/.well-known/openid-configuration"
    cern_oidc_url = ${?METADATA_VIEWER_CERN_OIDC_URL}
    
    # CERN issuer URL (required)
    cern_issuer = "https://auth.cern.ch/auth/realms/cern"
    cern_issuer = ${?METADATA_VIEWER_CERN_ISSUER}
}

database {
    # Database connection configuration (required)
    host = ${METADATA_VIEWER_POSTGRES_HOST}
    port = ${METADATA_VIEWER_POSTGRES_PORT}
    
    user = ${METADATA_VIEWER_POSTGRES_USER}
    password = ${METADATA_VIEWER_POSTGRES_PASSWORD}
    
    db = ${METADATA_VIEWER_POSTGRES_DB}
    
    # Optional database schema file path
    schema_file = ${?METADATA_VIEWER_DATABASE_SCHEMA_FILE}
}
